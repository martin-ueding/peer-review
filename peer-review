#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2012 Martin Ueding <dev@martin-ueding.de>

"""
Goes through the university module folders and gather the latest exercise PDF.
Those PDF files are then used to combined into a new email in Thunderbird.

The email addresses are taken from ``~/.config/peer-review/config.js``.
"""

import argparse
import datetime
import dateutil.parser
import json
import os
import re
import subprocess

__docformat__ = "restructuredtext en"

root = os.path.expanduser("~/Dokumente/Studium")
"""
Root folder.
"""

modules = ["physik220", "physik210", "math240"]
"""
List of the current modules.
"""

def find_latest(modul, folders):
    """
    Finds the latest folder given a list of potential folders.
    """
    folders.sort()
    uebungen = filter(lambda folder: folder.startswith("Uebung_"), folders)
    if len(uebungen) > 0:
        try:
            for folder in reversed(uebungen):
                pdf = find_pdf(os.path.join(root, modul, folder))
                if pdf is None:
                    continue

                return pdf
        except ExpiredException:
            return None
    return None


mailtext = """Hi,

hier der aktuelle Stand der Zettel für {module}.

Beim Antworten bitte immer „allen Antworten“ drücken, damit die anderen auch sehen, welche Fehler bereits gefunden worden sind.

Grüße,

Martin"""
"""
The text for the email.
"""

def main():
    options = _parse_args()

    pdf_files = find_pdf_files(modules)

    titles = []
    for pdf_file in pdf_files:
        basename = os.path.basename(pdf_file)
        nameparts = basename.split('-')
        titles.append('-'.join(nameparts[:2]))

    attributes = [
        "preselectid=id4",
        "to='{to}'".format(to=','.join(get_recipients())),
        "subject='Zettel {module}'".format(module=', '.join(sorted(titles))),
        "body='{body}'".format(body=mailtext.format(
            module=", ".join(sorted(titles)),
        )),
        "attachment='{paths}'".format(paths=",".join(pdf_files)),
    ]

    command = ["thunderbird", "-compose", ",".join(attributes)]

    subprocess.call(command)


def find_pdf_files(modules):
    """
    Find the latest PDF files.

    :return: List with absolute paths.
    """
    pdf_files = []

    for modul in map(lambda modul: os.path.join(root, modul), modules):
        dirs = os.listdir(modul)
        if len(dirs) == 0:
            continue
        latest = find_latest(modul, dirs)

        if latest is not None:
            pdf_files.append(latest)

    return pdf_files


def get_recipients():
    """
    Retrieves the recipients from the config file.

    :return: List with recipients.
    """
    configfile = os.path.expanduser("~/.config/peer-review/config.js")
    if os.path.isfile(configfile):
        with open(configfile) as f:
            config = json.load(f)

        return config["recipients"]

    else:
        return ""

def find_pdf(latest):
    """
    Finds the PDF we are all interested in from the given folder.

    :param latest: Absolute path to the folder.
    :return: Absolute path of the PDF file. None if nothing found.
    """
    files = os.listdir(latest)

    regex = re.compile(r"(\w+\d+)-(\d+)-Martin\.pdf")

    for f in files:
        matcher = regex.match(f)

        if matcher is None:
            continue

        if is_expired(matcher.group(1), matcher.group(2)):
            raise ExpiredException()

        return os.path.join(latest, f)

    return None


def is_expired(modul, number):
    """
    Checks whether the given thing was already due and is therefore not needed
    any more. If the configuration file was not found, nothing is marked as
    expired.

    :return: Whether this sheet is expired.
    """
    datefile = os.path.expanduser("~/.config/peer-review/dates.js")

    if not os.path.isfile(datefile):
        print "No config file found"
        return False

    with open(datefile) as datefile_h:
        dates = json.load(datefile_h)

    try:
        sheet_date = dateutil.parser.parse(dates[modul][number])

        is_old = sheet_date < datetime.datetime.now()

        if is_old:
            print modul, number, "is expired"
        else:
            print modul, number, "is current"

        return is_old
    except KeyError as e:
        print "Cannot find key in ``dates.js``:", e
        return False


class ExpiredException(Exception):
    pass


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(usage="peer-review", description="Composes a new email with the most current exercises.")
    #parser.add_argument('args', metavar='N', type=str, nargs='*', help='Positional arguments.')
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument('--version', action='version', version='<the version>')

    return parser.parse_args()


if __name__ == "__main__":
    main()
